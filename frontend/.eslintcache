[{"E:\\Binance\\dexmatch\\frontend\\src\\App.js":"1","E:\\Binance\\dexmatch\\frontend\\src\\index.js":"2","E:\\Binance\\dexmatch\\frontend\\src\\reportWebVitals.js":"3","E:\\Binance\\dexmatch\\dapp\\src\\App.js":"4","E:\\Binance\\dexmatch\\dapp\\src\\reportWebVitals.js":"5","E:\\Binance\\dexmatch\\dapp\\src\\index.js":"6","E:\\Binance\\dexmatch\\dapp\\src\\components\\Toolbar.js":"7","E:\\Binance\\dexmatch\\dapp\\src\\containers\\Home.js":"8","E:\\Binance\\dexmatch\\dapp\\src\\containers\\Faucet.js":"9","E:\\Binance\\dexmatch\\dapp\\src\\containers\\Tokens.js":"10","E:\\Binance\\dexmatch\\dapp\\src\\assets\\Tokens.js":"11","E:\\Binance\\dexmatch\\dapp\\src\\containers\\Pairs.js":"12","E:\\Binance\\dexmatch\\dapp\\src\\web3\\connectors.js":"13","E:\\Binance\\dexmatch\\dapp\\src\\assets\\Exchange.js":"14","E:\\Binance\\dexmatch\\dapp\\src\\components\\BuySell.js":"15","E:\\Binance\\dexmatch\\dapp\\src\\components\\BuyOrderBook.js":"16","E:\\Binance\\dexmatch\\dapp\\src\\components\\SellOrderBook.js":"17","E:\\Binance\\dexmatch\\dapp\\src\\components\\WalletConnector.js":"18","E:\\Binance\\dexmatch\\dapp\\src\\components\\PairSelect.js":"19","E:\\Binance\\dexmatch\\dapp\\src\\components\\Front.js":"20","E:\\Binance\\dexmatch\\dapp\\src\\components\\UserOrders.js":"21","E:\\Binance\\binancedex\\frontend\\src\\index.js":"22","E:\\Binance\\binancedex\\frontend\\src\\containers\\Home.js":"23","E:\\Binance\\binancedex\\frontend\\src\\components\\Toolbar.js":"24","E:\\Binance\\binancedex\\frontend\\src\\containers\\Pairs.js":"25","E:\\Binance\\binancedex\\frontend\\src\\components\\WalletConnector.js":"26","E:\\Binance\\binancedex\\frontend\\src\\components\\UserOrders.js":"27","E:\\Binance\\binancedex\\frontend\\src\\components\\Front.js":"28","E:\\Binance\\binancedex\\frontend\\src\\components\\PairSelect.js":"29","E:\\Binance\\binancedex\\frontend\\src\\web3\\connectors.js":"30","E:\\Binance\\binancedex\\frontend\\src\\App.js":"31","E:\\Binance\\binancedex\\frontend\\src\\containers\\Tokens.js":"32","E:\\Binance\\binancedex\\frontend\\src\\components\\BuyOrderBook.js":"33","E:\\Binance\\binancedex\\frontend\\src\\components\\BuySell.js":"34","E:\\Binance\\binancedex\\frontend\\src\\assets\\Tokens.js":"35","E:\\Binance\\binancedex\\frontend\\src\\assets\\Exchange.js":"36","E:\\Binance\\binancedex\\frontend\\src\\components\\SellOrderBook.js":"37"},{"size":5484,"mtime":1607948585217,"results":"38","hashOfConfig":"39"},{"size":542,"mtime":1607901560954,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1607382662146,"results":"41","hashOfConfig":"39"},{"size":1114,"mtime":1609666586917,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":1607382662146,"results":"44","hashOfConfig":"43"},{"size":542,"mtime":1607901560954,"results":"45","hashOfConfig":"43"},{"size":1279,"mtime":1609667061047,"results":"46","hashOfConfig":"43"},{"size":5000,"mtime":1611743416109,"results":"47","hashOfConfig":"43"},{"size":1157,"mtime":1609891337821,"results":"48","hashOfConfig":"43"},{"size":1320,"mtime":1611055862049,"results":"49","hashOfConfig":"43"},{"size":873,"mtime":1609805244111,"results":"50","hashOfConfig":"43"},{"size":5203,"mtime":1611055607896,"results":"51","hashOfConfig":"43"},{"size":324,"mtime":1609837902408,"results":"52","hashOfConfig":"43"},{"size":92,"mtime":1611747500837,"results":"53","hashOfConfig":"43"},{"size":9095,"mtime":1611706630675,"results":"54","hashOfConfig":"43"},{"size":4229,"mtime":1611708523512,"results":"55","hashOfConfig":"43"},{"size":4227,"mtime":1611708984864,"results":"56","hashOfConfig":"43"},{"size":3741,"mtime":1611190712033,"results":"57","hashOfConfig":"43"},{"size":835,"mtime":1611400239531,"results":"58","hashOfConfig":"43"},{"size":1241,"mtime":1611275390735,"results":"59","hashOfConfig":"43"},{"size":152,"mtime":1611743557520,"results":"60","hashOfConfig":"43"},{"size":542,"mtime":1607901560954,"results":"61","hashOfConfig":"62"},{"size":4543,"mtime":1611965353450,"results":"63","hashOfConfig":"62"},{"size":1279,"mtime":1609667061047,"results":"64","hashOfConfig":"62"},{"size":5203,"mtime":1611055607896,"results":"65","hashOfConfig":"62"},{"size":3741,"mtime":1611190712033,"results":"66","hashOfConfig":"62"},{"size":380,"mtime":1611750521302,"results":"67","hashOfConfig":"62"},{"size":1241,"mtime":1611275390735,"results":"68","hashOfConfig":"62"},{"size":919,"mtime":1611828531799,"results":"69","hashOfConfig":"62"},{"size":324,"mtime":1609837902408,"results":"70","hashOfConfig":"62"},{"size":1114,"mtime":1609666586917,"results":"71","hashOfConfig":"62"},{"size":1320,"mtime":1611055862049,"results":"72","hashOfConfig":"62"},{"size":4313,"mtime":1611983806271,"results":"73","hashOfConfig":"62"},{"size":9101,"mtime":1611969996789,"results":"74","hashOfConfig":"62"},{"size":873,"mtime":1611749779589,"results":"75","hashOfConfig":"62"},{"size":92,"mtime":1611747500837,"results":"76","hashOfConfig":"62"},{"size":4289,"mtime":1611983308105,"results":"77","hashOfConfig":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1a37lq5",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"70yvj9",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"96"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"103"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lme6c1",{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"141"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Binance\\dexmatch\\frontend\\src\\App.js",["169","170","171"],"E:\\Binance\\dexmatch\\frontend\\src\\index.js",[],"E:\\Binance\\dexmatch\\frontend\\src\\reportWebVitals.js",[],"E:\\Binance\\dexmatch\\dapp\\src\\App.js",[],["172","173"],"E:\\Binance\\dexmatch\\dapp\\src\\reportWebVitals.js",[],["174","175"],"E:\\Binance\\dexmatch\\dapp\\src\\index.js",[],["176","177"],"E:\\Binance\\dexmatch\\dapp\\src\\components\\Toolbar.js",["178"],"import React,{useState} from 'react';\r\nimport {Link } from 'react-router-dom';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\n\r\nconst Toolbar = () => {\r\n    const [activeItem,setActiveItem] = useState('DEX');\r\n\r\n    const menuClick = (e) => {\r\n        //setActiveItem({name});\r\n        //console.log(e);\r\n    }\r\n    return (\r\n        <Menu pointing secondary>\r\n        <Menu.Item as={ Link }\r\n          name='DEX'\r\n          active={activeItem === 'DEX'}\r\n          onClick={menuClick}\r\n          to=\"/\"\r\n        />\r\n        <Menu.Item as={ Link }\r\n          name='Tokens'\r\n          active={activeItem === 'Tokens'}\r\n          onClick={menuClick}\r\n          to=\"/Tokens\"\r\n        />\r\n        <Menu.Item as={ Link }\r\n          name='Pairs'\r\n          active={activeItem === 'Pairs'}\r\n          onClick={menuClick}\r\n          to=\"/Pairs\"\r\n        />\r\n        <Menu.Item as={ Link }\r\n          name='Faucet'\r\n          active={activeItem === 'Faucet'}\r\n          onClick={menuClick}\r\n          to=\"/Faucet\"\r\n        />\r\n        <Menu.Menu position='right'>\r\n          <Menu.Item\r\n            name='DEX TESTBED'\r\n            active={activeItem === 'DEX TESTBED'}\r\n            onClick={menuClick}\r\n          />\r\n        </Menu.Menu>\r\n      </Menu>\r\n    )\r\n}\r\n\r\nexport default Toolbar;",["179","180"],"E:\\Binance\\dexmatch\\dapp\\src\\containers\\Home.js",["181"],"E:\\Binance\\dexmatch\\dapp\\src\\containers\\Faucet.js",[],"E:\\Binance\\dexmatch\\dapp\\src\\containers\\Tokens.js",[],["182","183"],"E:\\Binance\\dexmatch\\dapp\\src\\assets\\Tokens.js",[],["184","185"],"E:\\Binance\\dexmatch\\dapp\\src\\containers\\Pairs.js",["186"],"import React, { useState, useEffect } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { Button, Grid, Table, Dropdown } from 'semantic-ui-react';\r\nimport exchange from '../contracts/Dex.json';\r\nimport { EXCHANGEADD } from '../assets/Exchange';\r\nimport {TOKENS} from '../assets/Tokens';\r\n\r\nconst exchangeAddress = EXCHANGEADD.address;\r\n\r\nconst Pairs = () => {\r\n    const [tokenPairs,setTokenPairs] = useState([]);\r\n    const [numPairs,setNumPairs] = useState(0);\r\n    const [options,setOptions] = useState([]);\r\n    const [firstToken,setFirstToken] = useState('');\r\n    const [secondToken,setSecondToken] = useState('');\r\n\r\n    console.log(options);\r\n    console.log(tokenPairs);\r\n\r\n    useEffect( () => {\r\n        const tokensDropdown = () => {\r\n            console.log(TOKENS.length);\r\n            setOptions([]);\r\n            TOKENS.map(token => setOptions(options => [...options,{\r\n                text: token.symbol,\r\n                id : token.address,\r\n                value : token.address,\r\n            }]));\r\n        }\r\n        tokensDropdown();\r\n    },[]);\r\n\r\n    useEffect( () => {\r\n        const getList = async () => {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            //const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(exchangeAddress, exchange.abi, provider);\r\n            let id = (await contract.getTotalPairs()).toNumber();\r\n            setNumPairs(id);\r\n            setTokenPairs([]);\r\n            for(let i = 1; i <= id; ++i) {\r\n                let pairInfo = await contract.getPairInfo(i);\r\n                //console.log(pairInfo);\r\n                setTokenPairs(tokenPairs => [...tokenPairs,{\r\n                    id: i,\r\n                    tokenAddress1: pairInfo[0].toString(),\r\n                    tokenSymbol1: pairInfo[1].toString(),\r\n                    tokenAddress2: pairInfo[2].toString(),\r\n                    tokenSymbol2: pairInfo[3].toString(),\r\n                }]);\r\n            }\r\n        }\r\n        getList();\r\n    },[])\r\n\r\n    const firstDropdown = (e,d) => {\r\n        e.preventDefault();\r\n        setFirstToken(d.value);\r\n    }\r\n\r\n    const secondDropdown = (e,d) => {\r\n        e.preventDefault();\r\n        setSecondToken(d.value);\r\n    }\r\n\r\n    const createPair = async () => {\r\n        if (firstToken === '' || secondToken === '') {\r\n            alert(\"Please Select Both Tokens\");\r\n            return;\r\n        }\r\n\r\n        if (firstToken === secondToken) {\r\n            alert(\"Please Select Two Different Tokens\");\r\n            return;\r\n        }\r\n\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(exchangeAddress, exchange.abi, provider);\r\n        const connectedContract = contract.connect(signer);\r\n        connectedContract.createTokenPair(firstToken,secondToken);\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Row centered>\r\n                <h2>Available Token Pairs</h2>\r\n            </Grid.Row>\r\n            <Grid.Row centered>\r\n                <Table celled padded>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell textAlign='center'>Pair ID</Table.HeaderCell>\r\n                            <Table.HeaderCell textAlign='center'>Token 1</Table.HeaderCell>\r\n                            <Table.HeaderCell textAlign='center'>Token 2</Table.HeaderCell>\r\n                        </Table.Row>                \r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {tokenPairs.map(tokenPair => {\r\n                            return (\r\n                                <Table.Row key={tokenPair.id}>\r\n                                    <Table.Cell textAlign='center'>{tokenPair.id}</Table.Cell>\r\n                                    <Table.Cell textAlign='center'>{tokenPair.tokenSymbol1}</Table.Cell>\r\n                                    <Table.Cell textAlign='center'>{tokenPair.tokenSymbol2}</Table.Cell>\r\n                                </Table.Row>\r\n                            )\r\n                        })}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Row>\r\n            <Grid.Row centered>\r\n                <h2>Create Additional Pairs</h2>\r\n            </Grid.Row>\r\n            <Grid.Row centered columns={3}>\r\n                <Grid.Column textAlign='center'>\r\n                    <Dropdown placeholder='Token 1' options={options} onChange={firstDropdown} search selection/>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row centered columns={3}>\r\n                <Grid.Column textAlign='center'>\r\n                    <Dropdown placeholder='Token 2' options={options} onChange={secondDropdown} search selection/>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row centered columns={3}>\r\n                <Grid.Column textAlign='center'>\r\n                    <Button primary onClick={createPair}>Create Pair</Button>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Pairs;","E:\\Binance\\dexmatch\\dapp\\src\\web3\\connectors.js",[],"E:\\Binance\\dexmatch\\dapp\\src\\assets\\Exchange.js",[],"E:\\Binance\\dexmatch\\dapp\\src\\components\\BuySell.js",[],"E:\\Binance\\dexmatch\\dapp\\src\\components\\BuyOrderBook.js",["187"],"import React, { useState, useEffect } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport exchange from '../contracts/Dex.json';\r\nimport { EXCHANGEADD } from '../assets/Exchange';\r\nimport { Table } from 'semantic-ui-react';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nconst UNIT = 1000000000000000000;\r\nconst exchangeAddress = EXCHANGEADD.address;\r\n\r\nconst BuyOrderBook = ({firstToken,firstAddress,secondToken,secondAddress}) => {\r\n    const [orderSize,setOrderSize] = useState(0);\r\n    const [orders,setOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getOrderList = async () => {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const contract = new ethers.Contract(exchangeAddress, exchange.abi, provider);\r\n            console.log(firstToken,firstAddress,secondToken,secondAddress);\r\n\r\n            if (firstAddress && secondAddress) {\r\n                let offerSize = await contract.getOfferSize(secondAddress,firstAddress);\r\n                setOrderSize(offerSize.toNumber());\r\n            }\r\n        } \r\n\r\n        getOrderList();\r\n    },[firstToken,firstAddress,secondToken,secondAddress]);\r\n\r\n    useEffect(() => {\r\n        const getOrders = async () => {\r\n            if (orderSize > 0) {\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const contract = new ethers.Contract(exchangeAddress, exchange.abi, provider);\r\n                console.log(orderSize);\r\n\r\n                setOrders([]);\r\n    \r\n                let offerId = (await contract.getBestOffer(secondAddress,firstAddress)).toNumber();\r\n                let offers = await contract.getOfferPerId(offerId);\r\n\r\n                let sell = new BigNumber(offers[1].toString());\r\n                let buy = new BigNumber(offers[3].toString());\r\n\r\n                let price = buy.dividedBy(sell).toNumber();\r\n                let amount = sell.dividedBy(UNIT).toNumber();\r\n                let total = buy.dividedBy(UNIT).toNumber();\r\n\r\n                console.log(price,amount,total);\r\n\r\n                setOrders(orders => [...orders, {\r\n                    id: offerId,\r\n                    price: price,\r\n                    amount: amount,\r\n                    total: total,\r\n                }]);\r\n\r\n                for (let i = 1; i < orderSize; ++i) {\r\n                    offerId = (await contract.getPrevOffer(offerId)).toNumber();\r\n                    offers = await contract.getOfferPerId(offerId);\r\n\r\n                    sell = new BigNumber(offers[1].toString());\r\n                    buy = new BigNumber(offers[3].toString());\r\n                    price = buy.dividedBy(sell).toNumber();\r\n                    amount = sell.dividedBy(UNIT).toNumber();\r\n                    total = buy.dividedBy(UNIT).toNumber();\r\n\r\n                    setOrders(orders => [...orders, {\r\n                        id: offerId,\r\n                        price: price,\r\n                        amount: amount,\r\n                        total: total,\r\n                    }]);\r\n                }\r\n            } else {\r\n                setOrders([]);\r\n            }\r\n        }\r\n\r\n        getOrders();\r\n    },[orderSize,firstAddress,secondAddress]);\r\n\r\n    \r\n\r\n    return (\r\n        <Table celled padded>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell textAlign='center'>Price</Table.HeaderCell>\r\n                    <Table.HeaderCell textAlign='center'>Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell textAlign='center'>Total</Table.HeaderCell>\r\n                </Table.Row>                \r\n            </Table.Header>\r\n            <Table.Body>\r\n                {orders.map(order => {\r\n                    return (\r\n                        <Table.Row key={order.id}>\r\n                            <Table.Cell textAlign='center'>{order.price}</Table.Cell>\r\n                            <Table.Cell textAlign='center'>{order.amount}</Table.Cell>\r\n                            <Table.Cell textAlign='center'>{order.total}</Table.Cell>\r\n                        </Table.Row>\r\n                    )\r\n                })}\r\n            </Table.Body>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default BuyOrderBook;","E:\\Binance\\dexmatch\\dapp\\src\\components\\SellOrderBook.js",["188"],"import React, { useState, useEffect } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport exchange from '../contracts/Dex.json';\r\nimport { EXCHANGEADD } from '../assets/Exchange';\r\nimport { Table } from 'semantic-ui-react';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nconst UNIT = 1000000000000000000;\r\nconst exchangeAddress = EXCHANGEADD.address;\r\n\r\n\r\nconst SellOrderBook = ({firstToken,firstAddress,secondToken,secondAddress}) => {\r\n    const [orderSize,setOrderSize] = useState(0);\r\n    const [orders,setOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getOrderList = async () => {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const contract = new ethers.Contract(exchangeAddress, exchange.abi, provider);\r\n            console.log(firstToken,firstAddress,secondToken,secondAddress);\r\n\r\n            if (firstAddress && secondAddress) {\r\n                let offerSize = await contract.getOfferSize(firstAddress,secondAddress);\r\n                setOrderSize(offerSize.toNumber());\r\n            }\r\n        } \r\n\r\n        getOrderList();\r\n    },[firstToken,firstAddress,secondToken,secondAddress]);\r\n\r\n    useEffect(() => {\r\n        const getOrders = async () => {\r\n            if (orderSize > 0) {\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const contract = new ethers.Contract(exchangeAddress, exchange.abi, provider);\r\n                console.log(orderSize);\r\n\r\n                setOrders([]);\r\n    \r\n                let offerId = (await contract.getBestOffer(firstAddress,secondAddress)).toNumber();\r\n                let offers = await contract.getOfferPerId(offerId);\r\n\r\n                let sell = new BigNumber(offers[1].toString());\r\n                let buy = new BigNumber(offers[3].toString());\r\n\r\n                let price = sell.dividedBy(buy).toNumber();\r\n                let amount = buy.dividedBy(UNIT).toNumber();\r\n                let total = sell.dividedBy(UNIT).toNumber();\r\n\r\n                console.log(price,amount,total);\r\n\r\n                setOrders(orders => [...orders, {\r\n                    id: offerId,\r\n                    price: price,\r\n                    amount: amount,\r\n                    total: total,\r\n                }]);\r\n\r\n                for (let i = 1; i < orderSize; ++i) {\r\n                    offerId = (await contract.getPrevOffer(offerId)).toNumber();\r\n                    offers = await contract.getOfferPerId(offerId);\r\n\r\n                    sell = new BigNumber(offers[1].toString());\r\n                    buy = new BigNumber(offers[3].toString());\r\n\r\n                    price = sell.dividedBy(buy).toNumber();\r\n                    amount = buy.dividedBy(UNIT).toNumber();\r\n                    total = sell.dividedBy(UNIT).toNumber();\r\n\r\n                    setOrders(orders => [...orders, {\r\n                        id: offerId,\r\n                        price: price,\r\n                        amount: amount,\r\n                        total: total,\r\n                    }]);\r\n                }\r\n            } else {\r\n                setOrders([]);\r\n            }\r\n        }\r\n\r\n        getOrders();\r\n    },[orderSize,firstAddress,secondAddress]);\r\n\r\n    return (\r\n        <Table celled padded>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell textAlign='center'>Price</Table.HeaderCell>\r\n                    <Table.HeaderCell textAlign='center'>Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell textAlign='center'>Total</Table.HeaderCell>\r\n                </Table.Row>                \r\n            </Table.Header>\r\n            <Table.Body>\r\n                {orders.map(order => {\r\n                    return (\r\n                        <Table.Row key={order.id}>\r\n                            <Table.Cell textAlign='center'>{order.price}</Table.Cell>\r\n                            <Table.Cell textAlign='center'>{order.amount}</Table.Cell>\r\n                            <Table.Cell textAlign='center'>{order.total}</Table.Cell>\r\n                        </Table.Row>\r\n                    )\r\n                })}\r\n            </Table.Body>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default SellOrderBook;","E:\\Binance\\dexmatch\\dapp\\src\\components\\WalletConnector.js",["189","190","191"],"import React, { useState, useEffect } from 'react'; \r\nimport { useWeb3React } from '@web3-react/core';\r\nimport useSWR from 'swr';\r\nimport { formatEther, formatUnits } from \"@ethersproject/units\";\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport { isAddress } from '@ethersproject/address';\r\nimport ERC20 from '../contracts/erc20.json';\r\nimport { Table } from 'semantic-ui-react';\r\nimport {TOKENS} from '../assets/Tokens';\r\n\r\n\r\nconst fetcher = (library,abi) => (...args) => {\r\n  const [arg1, arg2, ...params] = args;\r\n\r\n  if (isAddress(arg1)) {\r\n    const address = arg1;\r\n    const method = arg2;\r\n    const contract = new Contract(address, abi, library.getSigner());\r\n    return contract[method](...params);\r\n  }\r\n  \r\n  const method = arg1;\r\n  return library[method](arg2, ...params);\r\n}\r\n\r\nexport const Balance = () => {\r\n  const { account, library } = useWeb3React();\r\n  const { data: balance, mutate } = useSWR(['getBalance', account, 'latest'], {\r\n    fetcher: fetcher(library,ERC20),\r\n  });\r\n\r\n  useEffect(() => {\r\n    library.on('block',() => {\r\n      mutate(undefined, true);\r\n    });\r\n\r\n    return () => {\r\n      library.removeAllListeners('block');\r\n    };\r\n  },[]);\r\n\r\n  if(!balance) {\r\n    return <div>...</div>\r\n  }\r\n  return <div>BNB : {parseFloat(formatEther(balance)).toPrecision(4)}</div>;\r\n}\r\n  \r\nexport const TokenBalance = ({ symbol, address, decimals }) => {\r\n  const { account, library } = useWeb3React();\r\n  const { data: balance, mutate } = useSWR([address, 'balanceOf', account], {\r\n    fetcher: fetcher(library, ERC20),\r\n  });\r\n\r\n  useEffect(() => {\r\n    const contract = new Contract(address, ERC20, library.getSigner());\r\n    const fromAcc = contract.filters.Transfer(account, null);\r\n    library.on(fromAcc, (from, to, amount, event) => {\r\n      console.log('Transfer|sent', { from, to, amount, event });\r\n      mutate(undefined, true);\r\n    });\r\n    const toAcc = contract.filters.Transfer(null, account);\r\n    library.on(toAcc, (from, to, amount, event) => {\r\n      console.log('Transfer|received', { from, to, amount, event });\r\n      mutate(undefined, true);\r\n    });\r\n\r\n    return () => {\r\n      library.removeAllListeners(fromAcc);\r\n      library.removeAllListeners(toAcc);\r\n    };\r\n  },[]);\r\n\r\n  if(!balance) {\r\n    return <Table.Body>...</Table.Body>\r\n  }\r\n  return (\r\n  <Table.Body>\r\n    <Table.Cell textAlign='center'>{symbol}</Table.Cell>\r\n    <Table.Cell textAlign='center'>{parseFloat(formatUnits(balance, decimals)).toPrecision(4)}</Table.Cell>\r\n  </Table.Body>);\r\n}\r\n  \r\nexport const TokenList = ({chainId}) => {\r\n  if (chainId === 97) {\r\n    return (\r\n      <>\r\n        <Table basic celled collapsing>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell textAlign='center'>Symbol</Table.HeaderCell>\r\n              <Table.HeaderCell textAlign='center'>Amount</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header> \r\n          {TOKENS.map((token) => (\r\n            <TokenBalance key={token.address} {...token} />\r\n          ))}\r\n        </Table>\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n};\r\n\r\n/*\r\nexport const Wallet = () => {\r\n  const { chainId, account, activate, active } = useWeb3React();\r\n\r\n  const onClick = () => {\r\n    activate(injectedConnector);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>USER ACCOUNT</h4>\r\n      {active ? (\r\n        <div>\r\n          <div>ChainId: {chainId}</div>\r\n          <div>Account: {account}</div>   \r\n        </div>\r\n      ) : (\r\n        <Button primary onClick={onClick}>\r\n          Connect To MetaMask\r\n        </Button>\r\n      )}\r\n      {active && \r\n      <>\r\n        <Balance />\r\n        <TokenList chainId={chainId} />\r\n      </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n*/","E:\\Binance\\dexmatch\\dapp\\src\\components\\PairSelect.js",[],"E:\\Binance\\dexmatch\\dapp\\src\\components\\Front.js",[],["192","193"],"E:\\Binance\\dexmatch\\dapp\\src\\components\\UserOrders.js",[],"E:\\Binance\\binancedex\\frontend\\src\\index.js",[],"E:\\Binance\\binancedex\\frontend\\src\\containers\\Home.js",["194","195"],"E:\\Binance\\binancedex\\frontend\\src\\components\\Toolbar.js",["196"],["197","198"],"E:\\Binance\\binancedex\\frontend\\src\\containers\\Pairs.js",["199"],["200","201"],"E:\\Binance\\binancedex\\frontend\\src\\components\\WalletConnector.js",["202","203","204"],"E:\\Binance\\binancedex\\frontend\\src\\components\\UserOrders.js",["205","206","207","208"],"import React from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport exchange from '../contracts/Dex.json';\r\nimport { EXCHANGEADD } from '../assets/Exchange';\r\n\r\nimport { Table } from 'semantic-ui-react';\r\n\r\n\r\nconst exchangeAddress = EXCHANGEADD.address;\r\n\r\nconst UserOrders = ({account}) => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserOrders;",["209","210"],"E:\\Binance\\binancedex\\frontend\\src\\components\\Front.js",[],"E:\\Binance\\binancedex\\frontend\\src\\components\\PairSelect.js",[],"E:\\Binance\\binancedex\\frontend\\src\\web3\\connectors.js",[],["211","212"],"E:\\Binance\\binancedex\\frontend\\src\\App.js",[],"E:\\Binance\\binancedex\\frontend\\src\\containers\\Tokens.js",[],"E:\\Binance\\binancedex\\frontend\\src\\components\\BuyOrderBook.js",["213"],"E:\\Binance\\binancedex\\frontend\\src\\components\\BuySell.js",[],"E:\\Binance\\binancedex\\frontend\\src\\assets\\Tokens.js",[],"E:\\Binance\\binancedex\\frontend\\src\\assets\\Exchange.js",[],"E:\\Binance\\binancedex\\frontend\\src\\components\\SellOrderBook.js",["214"],{"ruleId":"215","severity":1,"message":"216","line":78,"column":5,"nodeType":"217","endLine":78,"endColumn":7,"suggestions":"218"},{"ruleId":"215","severity":1,"message":"219","line":109,"column":5,"nodeType":"217","endLine":109,"endColumn":7,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":166,"column":21,"nodeType":"223","messageId":"224","endLine":166,"endColumn":34},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"225","replacedBy":"229"},{"ruleId":"227","replacedBy":"230"},{"ruleId":"225","replacedBy":"231"},{"ruleId":"227","replacedBy":"232"},{"ruleId":"221","severity":1,"message":"222","line":7,"column":23,"nodeType":"223","messageId":"224","endLine":7,"endColumn":36},{"ruleId":"225","replacedBy":"233"},{"ruleId":"227","replacedBy":"234"},{"ruleId":"221","severity":1,"message":"235","line":20,"column":10,"nodeType":"223","messageId":"224","endLine":20,"endColumn":18},{"ruleId":"225","replacedBy":"236"},{"ruleId":"227","replacedBy":"237"},{"ruleId":"225","replacedBy":"238"},{"ruleId":"227","replacedBy":"239"},{"ruleId":"221","severity":1,"message":"235","line":12,"column":12,"nodeType":"223","messageId":"224","endLine":12,"endColumn":20},{"ruleId":"240","severity":1,"message":"241","line":68,"column":31,"nodeType":"242","messageId":"243","endLine":73,"endColumn":23},{"ruleId":"240","severity":1,"message":"241","line":70,"column":31,"nodeType":"242","messageId":"243","endLine":75,"endColumn":23},{"ruleId":"221","severity":1,"message":"244","line":1,"column":17,"nodeType":"223","messageId":"224","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"216","line":40,"column":5,"nodeType":"217","endLine":40,"endColumn":7,"suggestions":"245"},{"ruleId":"215","severity":1,"message":"219","line":71,"column":5,"nodeType":"217","endLine":71,"endColumn":7,"suggestions":"246"},{"ruleId":"225","replacedBy":"247"},{"ruleId":"227","replacedBy":"248"},{"ruleId":"221","severity":1,"message":"249","line":13,"column":8,"nodeType":"223","messageId":"224","endLine":13,"endColumn":18},{"ruleId":"221","severity":1,"message":"235","line":20,"column":10,"nodeType":"223","messageId":"224","endLine":20,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":7,"column":23,"nodeType":"223","messageId":"224","endLine":7,"endColumn":36},{"ruleId":"225","replacedBy":"250"},{"ruleId":"227","replacedBy":"251"},{"ruleId":"221","severity":1,"message":"235","line":12,"column":12,"nodeType":"223","messageId":"224","endLine":12,"endColumn":20},{"ruleId":"225","replacedBy":"252"},{"ruleId":"227","replacedBy":"253"},{"ruleId":"221","severity":1,"message":"244","line":1,"column":17,"nodeType":"223","messageId":"224","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"216","line":40,"column":5,"nodeType":"217","endLine":40,"endColumn":7,"suggestions":"254"},{"ruleId":"215","severity":1,"message":"219","line":71,"column":5,"nodeType":"217","endLine":71,"endColumn":7,"suggestions":"255"},{"ruleId":"221","severity":1,"message":"256","line":2,"column":10,"nodeType":"223","messageId":"224","endLine":2,"endColumn":16},{"ruleId":"221","severity":1,"message":"257","line":3,"column":8,"nodeType":"223","messageId":"224","endLine":3,"endColumn":16},{"ruleId":"221","severity":1,"message":"258","line":6,"column":10,"nodeType":"223","messageId":"224","endLine":6,"endColumn":15},{"ruleId":"221","severity":1,"message":"259","line":9,"column":7,"nodeType":"223","messageId":"224","endLine":9,"endColumn":22},{"ruleId":"225","replacedBy":"260"},{"ruleId":"227","replacedBy":"261"},{"ruleId":"225","replacedBy":"262"},{"ruleId":"227","replacedBy":"263"},{"ruleId":"240","severity":1,"message":"241","line":69,"column":31,"nodeType":"242","messageId":"243","endLine":74,"endColumn":23},{"ruleId":"240","severity":1,"message":"241","line":70,"column":31,"nodeType":"242","messageId":"243","endLine":75,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'library' and 'mutate'. Either include them or remove the dependency array.","ArrayExpression",["264"],"React Hook useEffect has missing dependencies: 'account', 'address', 'library', and 'mutate'. Either include them or remove the dependency array.",["265"],"no-unused-vars","'setActiveItem' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["266"],"no-negated-in-lhs",["267"],["266"],["267"],["266"],["267"],["266"],["267"],"'numPairs' is assigned a value but never used.",["266"],["267"],["266"],["267"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'offerId', 'price', 'amount', 'total'.","ArrowFunctionExpression","unsafeRefs","'useState' is defined but never used.",["268"],["269"],["266"],["267"],"'UserOrders' is defined but never used.",["266"],["267"],["266"],["267"],["270"],["271"],"'ethers' is defined but never used.","'exchange' is defined but never used.","'Table' is defined but never used.","'exchangeAddress' is assigned a value but never used.",["266"],["267"],["266"],["267"],{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},"no-global-assign","no-unsafe-negation",{"desc":"272","fix":"276"},{"desc":"274","fix":"277"},{"desc":"272","fix":"278"},{"desc":"274","fix":"279"},"Update the dependencies array to be: [library, mutate]",{"range":"280","text":"281"},"Update the dependencies array to be: [account, address, library, mutate]",{"range":"282","text":"283"},{"range":"284","text":"281"},{"range":"285","text":"283"},{"range":"286","text":"281"},{"range":"287","text":"283"},[2075,2077],"[library, mutate]",[3092,3094],"[account, address, library, mutate]",[1185,1187],[2235,2237],[1185,1187],[2235,2237]]